{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///Users/sharleen/Desktop/PICKI-APP/picki/app/components/arrowButton/ArrowButton.js"],"sourcesContent":["'use client';\nimport { ChevronLeft, ChevronRight } from 'lucide-react';\nimport '../arrowButton/ArrowButton.css';\n\nexport default function ArrowButton({ direction = 'right', onClick, disabled = false }) {\n  const Icon = direction === 'left' ? ChevronLeft : ChevronRight;\n\n  return (\n    <button className=\"nav-button\" onClick={onClick} disabled={disabled}>\n      <Icon size={45} strokeWidth={3} />\n    </button>\n  );\n}\n"],"names":[],"mappings":";;;;AACA;AAAA;AADA;;;;AAIe,SAAS,YAAY,EAAE,YAAY,OAAO,EAAE,OAAO,EAAE,WAAW,KAAK,EAAE;IACpF,MAAM,OAAO,cAAc,SAAS,oNAAA,CAAA,cAAW,GAAG,sNAAA,CAAA,eAAY;IAE9D,qBACE,8OAAC;QAAO,WAAU;QAAa,SAAS;QAAS,UAAU;kBACzD,cAAA,8OAAC;YAAK,MAAM;YAAI,aAAa;;;;;;;;;;;AAGnC","debugId":null}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":["file:///Users/sharleen/Desktop/PICKI-APP/picki/app/events/invite/page.js"],"sourcesContent":["'use client';\n\nimport React, { useState, useRef } from 'react';\nimport Link from 'next/link';\nimport ArrowButton from '../../components/arrowButton/ArrowButton';\nimport { X, Plus, Search } from 'lucide-react';\nimport '../events.css';\nimport './invite.css';\n\nexport default function EventInvitePage() {\n  const [showGroupsOverlay, setShowGroupsOverlay] = useState(false);\n  const [showFriendsOverlay, setShowFriendsOverlay] = useState(false);\n  const [selectedGroups, setSelectedGroups] = useState([]);\n  const [selectedFriends, setSelectedFriends] = useState([]);\n  const searchInputRef = useRef(null);\n\n  const groups = [\n    { id: 1, name: 'Boba Babies', image: '/images/bobababies.png', color: '#FFE0EE' },\n    { id: 2, name: 'Always Lost', image: '/images/alwayslost.png', color: '#D6D1EA' },\n    { id: 3, name: 'Dean\\'s favs', image: '/images/deansfav.png', color: '#FFE0EE' },\n    { id: 4, name: 'Scoobygang', image: '/images/scoobygang.png', color: '#FFF3CF' },\n  ];\n\n  const friends = [\n    { id: 1, username: '@jenn_kim', profilePic: '/images/jennkim.png', color: '#FFF3CF' },\n    { id: 2, username: '@tiff_any', profilePic: '/images/tiffany.png', color: '#D7EDD2' },\n    { id: 3, username: '@adamsmith', profilePic: '/images/adamsmith.png', color: '#D6D1EA' },\n    { id: 4, username: '@soaphia', profilePic: '/images/soaphia.png', color: '#FFE0EE' },\n    { id: 5, username: '@nick_m', profilePic: '/images/nickm.png', color: '#D7EDD2' },\n    { id: 6, username: '@emnnem', profilePic: '/images/emnnem.png', color: '#D6D1EA' },\n    { id: 7, username: '@njzzzzz', profilePic: '/images/njzzzzz.png', color: '#FFF3CF' },\n  ];\n\n  // Toggle overlay visibility\n  const toggleOverlay = (type) => {\n    if (type === 'groups') {\n      setShowGroupsOverlay(!showGroupsOverlay);\n      setShowFriendsOverlay(false);\n    } else {\n      setShowFriendsOverlay(!showFriendsOverlay);\n      setShowGroupsOverlay(false);\n    }\n  };\n\n  // Toggle selection\n  const toggleSelection = (id, type) => {\n    if (type === 'group') {\n      const newSelected = selectedGroups.includes(id)\n        ? selectedGroups.filter(groupId => groupId !== id)\n        : [...selectedGroups, id];\n      setSelectedGroups(newSelected);\n    } else {\n      setSelectedFriends(\n        selectedFriends.includes(id)\n          ? selectedFriends.filter(friendId => friendId !== id)\n          : [...selectedFriends, id]\n      );\n    }\n  };\n\n  // Add selected groups and close overlay\n  const addSelectedGroups = () => {\n    setShowGroupsOverlay(false);\n  };\n\n  // Get selected items\n  const getSelected = (type) => {\n    return type === 'groups'\n      ? groups.filter(group => selectedGroups.includes(group.id))\n      : friends.filter(friend => selectedFriends.includes(friend.id));\n  };\n\n  return (\n    <div className=\"event-creator-container\">\n      <div className=\"mobile-frame\">\n        <div className=\"event-page\">\n          <div className=\"close-button-container\">\n            <X size={18} strokeWidth={3} className=\"close-icon\" />\n          </div>\n          \n          <div className=\"create-event-form\">\n            <h1>Invite</h1>\n            <p className=\"subtitle invite-subtitle\">Invite your friends!</p>\n\n            <div className=\"invite-options\">\n              <div className=\"invite-section\">\n                <h3 className=\"invite-section-title\">Choose a group</h3>\n                <p className=\"invite-section-subtitle\">Click to add and remove.</p>\n                \n                <div className=\"group-selection-container\">\n                  {getSelected('groups').map(group => (\n                    <div \n                      key={group.id} \n                      className=\"selected-group-card\"\n                      onClick={() => toggleSelection(group.id, 'group')}\n                    >\n                      <img \n                        src={group.image} \n                        alt={group.name} \n                        className=\"selected-group-image\"\n                        onError={(e) => {\n                          e.target.onerror = null;\n                          e.target.src = '/images/groups/default.jpg';\n                        }}\n                      />\n                      <div className=\"selected-group-name\" style={{ backgroundColor: group.color }}>\n                        {group.name}\n                      </div>\n                    </div>\n                  ))}\n                \n                  <div \n                    className=\"add-group-card\"\n                    onClick={() => toggleOverlay('groups')}\n                  >\n                    <div className=\"add-group-placeholder\">\n                      <Plus size={20} strokeWidth={3} color=\"#333\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"invite-separator\">OR</div>\n\n              <div className=\"invite-section\">\n                <h3 className=\"invite-section-title\">Select individual friends</h3>\n                \n                <div \n                  className=\"add-friend-button\"\n                  onClick={() => toggleOverlay('friends')}\n                >\n                  <Plus size={16} strokeWidth={3} />\n                </div>\n\n                {selectedFriends.length > 0 && (\n                  <div className=\"selected-friends\">\n                    {getSelected('friends').map(friend => (\n                      <div \n                        key={friend.id} \n                        className=\"selected-friend\"\n                        style={{ backgroundColor: friend.color }}\n                      >\n                        <img \n                          src={friend.profilePic} \n                          alt={friend.username} \n                          className=\"friend-image\"\n                          onError={(e) => {\n                            e.target.onerror = null;\n                            e.target.src = '/images/profiles/default.jpg';\n                          }}\n                        />\n                        <span className=\"friend-username\">{friend.username}</span>\n                        <button \n                          className=\"remove-friend\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            toggleSelection(friend.id, 'friend');\n                          }}\n                        >\n                          <X size={20} strokeWidth={3}/>\n                        </button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"event-nav\">\n            <Link href='/events/cover'>\n              <ArrowButton direction=\"left\" />\n            </Link>\n            <Link href=\"/events/confirm\">\n              <ArrowButton direction=\"right\" />\n            </Link>\n          </div>\n        </div>\n\n        {/* Groups Overlay */}\n        {showGroupsOverlay && (\n          <div className=\"invite-slide-overlay\">\n            <div className=\"invite-overlay-frame\">\n              <div className=\"invite-overlay-content\">\n                <div className=\"invite-overlay-header\">\n                  <button className=\"invite-close-button\" onClick={() => toggleOverlay('groups')}>\n                    <X size={18} strokeWidth={3} />\n                  </button>\n                  <h2 className=\"invite-overlay-title\">Your Groups</h2>\n                </div>\n                \n                <div className=\"groups-grid\">\n                  {groups.map(group => (\n                    <div\n                      key={group.id}\n                      className={`group-card ${selectedGroups.includes(group.id) ? 'selected' : ''}`}\n                      onClick={() => toggleSelection(group.id, 'group')}\n                    >\n                      <img \n                        src={group.image} \n                        alt={group.name} \n                        className=\"group-card-image\"\n                        onError={(e) => {\n                          e.target.onerror = null;\n                          e.target.src = '/images/groups/default.jpg';\n                        }}\n                      />\n                      <div className=\"group-card-name\" style={{ backgroundColor: group.color }}>\n                        {group.name}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                \n                <button \n                  className=\"add-groups-button\"\n                  onClick={addSelectedGroups}\n                >\n                  Add the group\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Friends Overlay */}\n        {showFriendsOverlay && (\n          <div className=\"friends-slide-overlay\">\n            <div className=\"friends-overlay-frame\">\n              <div className=\"friends-overlay-content\">\n                <div className=\"friends-overlay-header\">\n                  <button className=\"friends-close-button\" onClick={() => toggleOverlay('friends')}>\n                    <X size={18} strokeWidth={3} />\n                  </button>\n                  <h2 className=\"friends-overlay-title\">Your Friends</h2>\n                </div>\n\n                <div className=\"search-container\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Search\"\n                    className=\"search-input\"\n                    ref={searchInputRef}\n                  />\n                  <Search size={18} strokeWidth={3} className=\"search-icon\" />\n                </div>\n                \n                <div className=\"friends-list\">\n                  {friends.map(friend => (\n                    <div\n                      key={friend.id}\n                      className=\"friend-item\"\n                      style={{ backgroundColor: friend.color }}\n                    >\n                      <img \n                        src={friend.profilePic} \n                        alt={friend.username} \n                        className=\"friend-profile-pic\"\n                        onError={(e) => {\n                          e.target.onerror = null;\n                          e.target.src = '/images/profiles/default.jpg';\n                        }}\n                      />\n                      <div className=\"friend-username\">{friend.username}</div>\n                      <button \n                        className={`add-friend-icon ${selectedFriends.includes(friend.id) ? 'selected' : ''}`}\n                        onClick={() => toggleSelection(friend.id, 'friend')}\n                      >\n                        <Plus size={20} strokeWidth={3} />\n                      </button>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AALA;;;;;;;;AASe,SAAS;IACtB,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3D,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC7D,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IACvD,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IACzD,MAAM,iBAAiB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE;IAE9B,MAAM,SAAS;QACb;YAAE,IAAI;YAAG,MAAM;YAAe,OAAO;YAA0B,OAAO;QAAU;QAChF;YAAE,IAAI;YAAG,MAAM;YAAe,OAAO;YAA0B,OAAO;QAAU;QAChF;YAAE,IAAI;YAAG,MAAM;YAAgB,OAAO;YAAwB,OAAO;QAAU;QAC/E;YAAE,IAAI;YAAG,MAAM;YAAc,OAAO;YAA0B,OAAO;QAAU;KAChF;IAED,MAAM,UAAU;QACd;YAAE,IAAI;YAAG,UAAU;YAAa,YAAY;YAAuB,OAAO;QAAU;QACpF;YAAE,IAAI;YAAG,UAAU;YAAa,YAAY;YAAuB,OAAO;QAAU;QACpF;YAAE,IAAI;YAAG,UAAU;YAAc,YAAY;YAAyB,OAAO;QAAU;QACvF;YAAE,IAAI;YAAG,UAAU;YAAY,YAAY;YAAuB,OAAO;QAAU;QACnF;YAAE,IAAI;YAAG,UAAU;YAAW,YAAY;YAAqB,OAAO;QAAU;QAChF;YAAE,IAAI;YAAG,UAAU;YAAW,YAAY;YAAsB,OAAO;QAAU;QACjF;YAAE,IAAI;YAAG,UAAU;YAAY,YAAY;YAAuB,OAAO;QAAU;KACpF;IAED,4BAA4B;IAC5B,MAAM,gBAAgB,CAAC;QACrB,IAAI,SAAS,UAAU;YACrB,qBAAqB,CAAC;YACtB,sBAAsB;QACxB,OAAO;YACL,sBAAsB,CAAC;YACvB,qBAAqB;QACvB;IACF;IAEA,mBAAmB;IACnB,MAAM,kBAAkB,CAAC,IAAI;QAC3B,IAAI,SAAS,SAAS;YACpB,MAAM,cAAc,eAAe,QAAQ,CAAC,MACxC,eAAe,MAAM,CAAC,CAAA,UAAW,YAAY,MAC7C;mBAAI;gBAAgB;aAAG;YAC3B,kBAAkB;QACpB,OAAO;YACL,mBACE,gBAAgB,QAAQ,CAAC,MACrB,gBAAgB,MAAM,CAAC,CAAA,WAAY,aAAa,MAChD;mBAAI;gBAAiB;aAAG;QAEhC;IACF;IAEA,wCAAwC;IACxC,MAAM,oBAAoB;QACxB,qBAAqB;IACvB;IAEA,qBAAqB;IACrB,MAAM,cAAc,CAAC;QACnB,OAAO,SAAS,WACZ,OAAO,MAAM,CAAC,CAAA,QAAS,eAAe,QAAQ,CAAC,MAAM,EAAE,KACvD,QAAQ,MAAM,CAAC,CAAA,SAAU,gBAAgB,QAAQ,CAAC,OAAO,EAAE;IACjE;IAEA,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAI,WAAU;sCACb,cAAA,8OAAC,4LAAA,CAAA,IAAC;gCAAC,MAAM;gCAAI,aAAa;gCAAG,WAAU;;;;;;;;;;;sCAGzC,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;8CAAG;;;;;;8CACJ,8OAAC;oCAAE,WAAU;8CAA2B;;;;;;8CAExC,8OAAC;oCAAI,WAAU;;sDACb,8OAAC;4CAAI,WAAU;;8DACb,8OAAC;oDAAG,WAAU;8DAAuB;;;;;;8DACrC,8OAAC;oDAAE,WAAU;8DAA0B;;;;;;8DAEvC,8OAAC;oDAAI,WAAU;;wDACZ,YAAY,UAAU,GAAG,CAAC,CAAA,sBACzB,8OAAC;gEAEC,WAAU;gEACV,SAAS,IAAM,gBAAgB,MAAM,EAAE,EAAE;;kFAEzC,8OAAC;wEACC,KAAK,MAAM,KAAK;wEAChB,KAAK,MAAM,IAAI;wEACf,WAAU;wEACV,SAAS,CAAC;4EACR,EAAE,MAAM,CAAC,OAAO,GAAG;4EACnB,EAAE,MAAM,CAAC,GAAG,GAAG;wEACjB;;;;;;kFAEF,8OAAC;wEAAI,WAAU;wEAAsB,OAAO;4EAAE,iBAAiB,MAAM,KAAK;wEAAC;kFACxE,MAAM,IAAI;;;;;;;+DAdR,MAAM,EAAE;;;;;sEAmBjB,8OAAC;4DACC,WAAU;4DACV,SAAS,IAAM,cAAc;sEAE7B,cAAA,8OAAC;gEAAI,WAAU;0EACb,cAAA,8OAAC,kMAAA,CAAA,OAAI;oEAAC,MAAM;oEAAI,aAAa;oEAAG,OAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;sDAM9C,8OAAC;4CAAI,WAAU;sDAAmB;;;;;;sDAElC,8OAAC;4CAAI,WAAU;;8DACb,8OAAC;oDAAG,WAAU;8DAAuB;;;;;;8DAErC,8OAAC;oDACC,WAAU;oDACV,SAAS,IAAM,cAAc;8DAE7B,cAAA,8OAAC,kMAAA,CAAA,OAAI;wDAAC,MAAM;wDAAI,aAAa;;;;;;;;;;;gDAG9B,gBAAgB,MAAM,GAAG,mBACxB,8OAAC;oDAAI,WAAU;8DACZ,YAAY,WAAW,GAAG,CAAC,CAAA,uBAC1B,8OAAC;4DAEC,WAAU;4DACV,OAAO;gEAAE,iBAAiB,OAAO,KAAK;4DAAC;;8EAEvC,8OAAC;oEACC,KAAK,OAAO,UAAU;oEACtB,KAAK,OAAO,QAAQ;oEACpB,WAAU;oEACV,SAAS,CAAC;wEACR,EAAE,MAAM,CAAC,OAAO,GAAG;wEACnB,EAAE,MAAM,CAAC,GAAG,GAAG;oEACjB;;;;;;8EAEF,8OAAC;oEAAK,WAAU;8EAAmB,OAAO,QAAQ;;;;;;8EAClD,8OAAC;oEACC,WAAU;oEACV,SAAS,CAAC;wEACR,EAAE,eAAe;wEACjB,gBAAgB,OAAO,EAAE,EAAE;oEAC7B;8EAEA,cAAA,8OAAC,4LAAA,CAAA,IAAC;wEAAC,MAAM;wEAAI,aAAa;;;;;;;;;;;;2DArBvB,OAAO,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;sCA+B5B,8OAAC;4BAAI,WAAU;;8CACb,8OAAC,4JAAA,CAAA,UAAI;oCAAC,MAAK;8CACT,cAAA,8OAAC,+IAAA,CAAA,UAAW;wCAAC,WAAU;;;;;;;;;;;8CAEzB,8OAAC,4JAAA,CAAA,UAAI;oCAAC,MAAK;8CACT,cAAA,8OAAC,+IAAA,CAAA,UAAW;wCAAC,WAAU;;;;;;;;;;;;;;;;;;;;;;;gBAM5B,mCACC,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC;wBAAI,WAAU;kCACb,cAAA,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;oCAAI,WAAU;;sDACb,8OAAC;4CAAO,WAAU;4CAAsB,SAAS,IAAM,cAAc;sDACnE,cAAA,8OAAC,4LAAA,CAAA,IAAC;gDAAC,MAAM;gDAAI,aAAa;;;;;;;;;;;sDAE5B,8OAAC;4CAAG,WAAU;sDAAuB;;;;;;;;;;;;8CAGvC,8OAAC;oCAAI,WAAU;8CACZ,OAAO,GAAG,CAAC,CAAA,sBACV,8OAAC;4CAEC,WAAW,CAAC,WAAW,EAAE,eAAe,QAAQ,CAAC,MAAM,EAAE,IAAI,aAAa,IAAI;4CAC9E,SAAS,IAAM,gBAAgB,MAAM,EAAE,EAAE;;8DAEzC,8OAAC;oDACC,KAAK,MAAM,KAAK;oDAChB,KAAK,MAAM,IAAI;oDACf,WAAU;oDACV,SAAS,CAAC;wDACR,EAAE,MAAM,CAAC,OAAO,GAAG;wDACnB,EAAE,MAAM,CAAC,GAAG,GAAG;oDACjB;;;;;;8DAEF,8OAAC;oDAAI,WAAU;oDAAkB,OAAO;wDAAE,iBAAiB,MAAM,KAAK;oDAAC;8DACpE,MAAM,IAAI;;;;;;;2CAdR,MAAM,EAAE;;;;;;;;;;8CAoBnB,8OAAC;oCACC,WAAU;oCACV,SAAS;8CACV;;;;;;;;;;;;;;;;;;;;;;gBASR,oCACC,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC;wBAAI,WAAU;kCACb,cAAA,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;oCAAI,WAAU;;sDACb,8OAAC;4CAAO,WAAU;4CAAuB,SAAS,IAAM,cAAc;sDACpE,cAAA,8OAAC,4LAAA,CAAA,IAAC;gDAAC,MAAM;gDAAI,aAAa;;;;;;;;;;;sDAE5B,8OAAC;4CAAG,WAAU;sDAAwB;;;;;;;;;;;;8CAGxC,8OAAC;oCAAI,WAAU;;sDACb,8OAAC;4CACC,MAAK;4CACL,aAAY;4CACZ,WAAU;4CACV,KAAK;;;;;;sDAEP,8OAAC,sMAAA,CAAA,SAAM;4CAAC,MAAM;4CAAI,aAAa;4CAAG,WAAU;;;;;;;;;;;;8CAG9C,8OAAC;oCAAI,WAAU;8CACZ,QAAQ,GAAG,CAAC,CAAA,uBACX,8OAAC;4CAEC,WAAU;4CACV,OAAO;gDAAE,iBAAiB,OAAO,KAAK;4CAAC;;8DAEvC,8OAAC;oDACC,KAAK,OAAO,UAAU;oDACtB,KAAK,OAAO,QAAQ;oDACpB,WAAU;oDACV,SAAS,CAAC;wDACR,EAAE,MAAM,CAAC,OAAO,GAAG;wDACnB,EAAE,MAAM,CAAC,GAAG,GAAG;oDACjB;;;;;;8DAEF,8OAAC;oDAAI,WAAU;8DAAmB,OAAO,QAAQ;;;;;;8DACjD,8OAAC;oDACC,WAAW,CAAC,gBAAgB,EAAE,gBAAgB,QAAQ,CAAC,OAAO,EAAE,IAAI,aAAa,IAAI;oDACrF,SAAS,IAAM,gBAAgB,OAAO,EAAE,EAAE;8DAE1C,cAAA,8OAAC,kMAAA,CAAA,OAAI;wDAAC,MAAM;wDAAI,aAAa;;;;;;;;;;;;2CAlB1B,OAAO,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BpC","debugId":null}}]
}